/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package kerlib.draw;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author zeus
 */
public class MultiEnumJPanel<VALUE> extends javax.swing.JPanel {
    ///Которкая запись, отображающаяся в списке
    private record CBValue<VALUE>(VALUE v, MultiEnumJPanel<VALUE> toS){@Override public String toString() {return v == null ? "" : toS.val_to_string.apply(v);}}
    
    //////Создаёт панель, предоставляющую ввод новых элементов
    public MultiEnumJPanel() {
        initComponents();
        autoCompletion = new AutoCompletion(addValue);
        final var com = (JTextField) addValue.getEditor().getEditorComponent();
        com.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent event) {
                JComboBoxCallActionPerformed = true;
                final var text = com.getText().trim();
                if (event.getKeyChar() == KeyEvent.VK_BACK_SPACE && text.isEmpty()) {
                    remove();
                } else if (event.getKeyChar() == KeyEvent.VK_ENTER) {
                    add(text);
                }
            }
        });
    }
    ///Создаёт панель, предоставляющую ввод новых элементов
    ///@param values список возможных элементов
    public MultiEnumJPanel(VALUE[] values) {this(Arrays.asList(values)); }
    ///Создаёт панель, предоставляющую ввод новых элементов
    ///@param values список возможных элементов
    public MultiEnumJPanel(Collection<VALUE> values) {
        this();
        setValues(values);
    }
    ///Создаёт панель, предоставляющую ввод новых элементов
    ///@param values список возможных элементов
    ///@param val_to_string функция получения строки из элемента
    public MultiEnumJPanel(Collection<VALUE> values, java.util.function.Function<VALUE, String> val_to_string) {
        this();
        setValues(values);
        setToString(val_to_string);
    }
    ///Создаёт панель, предоставляющую ввод новых элементов
    ///@param values список возможных элементов
    ///@param val_to_string функция получения строки из элемента
    ///@param str_to_val функция создания элемента из строки
    public MultiEnumJPanel(Collection<VALUE> values, java.util.function.Function<VALUE, String> val_to_string, java.util.function.Function<String,VALUE> str_to_val) {
        this();
        setValues(values);
        setToString(val_to_string);
        setToVal(str_to_val);
    }
    ///@param val_to_string функция преобразования значения к строке 
    public void setToString(java.util.function.Function<VALUE, String> val_to_string){this.val_to_string = val_to_string;updateALL();}
    ///@param str_to_val функция создания нового значения из строки
    public void setToVal(java.util.function.Function<String,VALUE> str_to_val){
        this.str_to_val = str_to_val;
        autoCompletion.setIsNew(str_to_val != null);
    }
    ///@param values установить эти значения, как все возможные
    public void setValues(Collection<VALUE> values){this.values.clear();this.values.addAll(values);updateALL();}
    ///@return получить текущие возможные значения
    public List<VALUE> getValues(){return values;}
    ///@param selected установить эти значения, как текущие выбранные
    public void setSelected(Collection<VALUE> selected){this.selectValues.clear();this.selectValues.addAll(selected);changeValue(); updateValues();}
    ///@return получить текущие выделенные значения
    public List<VALUE> getSelected(){return selectValues;}
    ///Добавляет слушателя событий изменения. Каждый раз, когда изменяется теущее значение, вызывается эта функция
    public void addChangeListener(java.util.function.Consumer<List<VALUE>> listener){
        ch_listeners.add(listener);
    }
    
    @Override
    public String toString() {
        final var it = selectValues.iterator();
        if (!it.hasNext()) {
            return "";
        }

        StringBuilder sb = new StringBuilder();
        for (;;) {
            final var e = it.next();
            sb.append(val_to_string.apply(e));
            if (!it.hasNext()) {
                return sb.toString();
            }
            sb.append(' ').append(' ');
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        valuesLabel = new javax.swing.JPanel();
        addValue = new javax.swing.JComboBox<>();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.X_AXIS));

        valuesLabel.setLayout(new javax.swing.BoxLayout(valuesLabel, javax.swing.BoxLayout.X_AXIS));
        add(valuesLabel);

        addValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addValueActionPerformed(evt);
            }
        });
        add(addValue);
    }// </editor-fold>//GEN-END:initComponents

    private void addValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addValueActionPerformed
        if (JComboBoxCallActionPerformed) {
            JComboBoxCallActionPerformed = false;
        } else {
            add(addValue.getSelectedItem().toString());
        }
    }//GEN-LAST:event_addValueActionPerformed

    
    ///Добавляет новое значение из JComboBox к нашим. Если такое значение есть, конечно
    private void add(String value) {
        value = value.trim();
        if (value.isBlank()) return;
        VALUE find = null;
        var size = addValue.getModel().getSize();
        for (int i = 0; i < size; i++) {
            var v = addValue.getModel().getElementAt(i);
            var str = v.toString();
            if(str.equals(value)){
                find = v.v();
            }
        }
        if (find == null) {
            if(str_to_val != null){
                final var res = JOptionPane.showConfirmDialog(null,
                        "Желаете добавить слово '"+value+"' к вариантам выбора?",
                        "Новое слово",
                        JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
                if (res == JOptionPane.NO_OPTION) {
                    return;
                } else {
                    try{
                        find = str_to_val.apply(value);
                        values.add(find);
                        updateCases();
                    }catch(Exception e){
                        return;
                    }
                } 
            } else {
                return;
            }
        }
        var ffind = find;
        if(selectValues.stream().filter(v -> v.equals(ffind)).count() == 0){
            selectValues.add(ffind);
            changeValue();
        }
        updateValues();
    }
    ///Удаляет последнее значение из списка перечислений
    private void remove() {
        if (!selectValues.isEmpty()){
            selectValues.remove(selectValues.size() - 1);
            changeValue();
        }
        updateValues();
    }
    //Обновляет вообще всё
    private void updateALL(){updateCases();updateValues();}
    ///Обновляет список возможных значений 
    private void updateCases(){
        var model = new DefaultComboBoxModel<CBValue<VALUE>>(new CBValue[]{new CBValue<VALUE>(null, this)});
        model.addAll(values.stream().map(v -> new CBValue<VALUE>(v, this)).toList());
        addValue.setModel(model);
    }
    ///Обновляет всё, кроме списка возможных значений
    private void updateValues(){
        valuesLabel.removeAll();
        selectValues.forEach(l -> {
            final var label = new javax.swing.JLabel(val_to_string.apply(l));
            label.setBorder(BorderFactory.createRaisedBevelBorder());
            valuesLabel.add(label);
        });
        updateUI();
        addValue.setSelectedIndex(0);
    }
    ///Обзванивает всех слушателей, оповещая их, что у нас что-то изменилось
    private void changeValue(){
        ch_listeners.forEach(l -> l.accept(getSelected()));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<CBValue<VALUE>> addValue;
    private javax.swing.JPanel valuesLabel;
    // End of variables declaration//GEN-END:variables
    ///Список всех значений
    private List<VALUE> values = new ArrayList<>();
    ///Функция преобразования значения в строку
    private java.util.function.Function<VALUE, String> val_to_string = v -> v.toString();
    ///Можно добавлять новые значения? Если да, то мы должны уметь переводить строку в значение
    private java.util.function.Function<String,VALUE> str_to_val;
    ///Выбранные значения
	private List<VALUE> selectValues = new ArrayList<>();
    ///Флаг, что вызывалась функция события для обработчика событий выбора значений
	private boolean JComboBoxCallActionPerformed = false;
    ///Объект, отвечающий за автодополнение селектора
    private final AutoCompletion autoCompletion;
    ///Слушатели событий изменения
    private final List<java.util.function.Consumer<List<VALUE>>> ch_listeners = new ArrayList<>();
}
